#https://www.youtube.com/watch?v=qLnMoPPMX9Q
#https://www.youtube.com/watch?v=NeU3SY21aMA
#https://www.youtube.com/watch?v=f4mXJGEKBaA

'''
Several rectangles are on the plane, some possibly overlapping others. The rectangles are described in s x1, y1, x2 and y2. Rectangle i has it's lower-left corner (x1[i], y1[i]), and upper-right corner (x2[i], y2[i]).

Two or more rectangles overlap if they have a common area. Meeting along an edge or a corner only is not an overlap. Return the largest number of rectangles that overlap.
'''


import sys
from itertools import chain

# X dimension already intersects
def is_intersects(r1, r2):
    _, y1, _, y2 = r1
    _, b1, _, b2 = r2

    return y1 < b1 < y2 or y1 < b2 < y2 or b1 < y1 < b2 or b1 < y2 < b2

def is_intersects_r(r1, r2):
    x1, y1, x2, y2 = r1
    a1, b1, a2, b2 = r2

    return (y1 < b1 < y2 or y1 < b2 < y2 or b1 < y1 < b2 or b1 < y2 < b2) and\
        (x1 < a1 < x2 or x1 < a2 < x2 or a1 < x1 < a2 or a1 < x2 < a2)

def inside(r, p):
    x, y = p
    x1, y1, x2, y2 = r

    return (x1 < x < x2) and (y1 < y < y2)

def is_intersects_r2(r1, r2):
    x1, y1, x2, y2 = r1
    a1, b1, a2, b2 = r2

    for p in ((x1, y1), (x1, y2), (x2, y1), (x2, y2)):
        if inside(r2, p):
            return True

    for p in ((a1, b1), (a1, b2), (a2, b1), (a2, b2)):
        if inside(r1, p):
            return True

    return False



class SoManyRectangles:
    def maxOverlapBF(self, x1arr, y1arr, x2arr, y2arr):
        rects = set()
        rect_counts = {}
        for r in zip(x1arr, y1arr, x2arr, y2arr):
            x1, y1, x2, y2 = r

            if r not in rect_counts.keys():
                rect_counts[r] = 1
            else:
                rect_counts[r] += 1

            rects.add(r)

        max_isec_cntr = -sys.maxsize
        rects = list(rects)
        N = len(rects)

        # WRONG target value : NOT a rectangle with most intersections
        # BUT a subrect belonging to most rects at once
        # POSSIBLY it is also an error in OPT case
        for i in range(N):
            r1 = rects[i]
            isec_cntr = rect_counts[r1]
            for j in range(N):
                r2 = rects[j]
                if i != j and is_intersects_r2(r1, r2):
                    isec_cntr += rect_counts[r2]

            max_isec_cntr = max(max_isec_cntr, isec_cntr)

        return max_isec_cntr

    def maxOverlap(self, x1arr, y1arr, x2arr, y2arr):
        rects_x1 = {}

        min_x = sys.maxsize
        max_x = -sys.maxsize
        rect_counts = {}
        X = set()
        for (x1, y1, x2, y2) in zip(x1arr, y1arr, x2arr, y2arr):
            X.add(x1)
            X.add(x2)
            r = (x1, y1, x2, y2)
            if r not in rect_counts.keys():
                rect_counts[r] = 1
            else:
                rect_counts[r] += 1


            if x1 not in rects_x1.keys():
                rects_x1[x1] = []

            rects_x1[x1].append(r)

            min_x = min(min_x, x1, x2)
            max_x = max(max_x, x1, x2)


        XL = list(X)
        XL.sort()
        active_rects = {}

        max_isec_cntr  = -sys.maxsize
        for x in XL:
            if x in active_rects.keys():
                del active_rects[x]

            if x not in rects_x1.keys():
                continue

            for r in rects_x1[x]:
                x1, y2, x2, y2 = r
                if x2 not in active_rects.keys():
                    active_rects[x2] = []

                active_rects[x2].append(r)


            rects = chain(*active_rects.values())
            for r1 in rects:
                isec_cntr = rect_counts[r1]
                for r2 in rects:
                    if r1 != r2 and is_intersects(r1, r2):
                        isec_cntr += rect_counts[r2]

                max_isec_cntr = max(max_isec_cntr, isec_cntr)


        return max_isec_cntr


S = SoManyRectangles()
print(S.maxOverlapBF([0, 90],\
[0, 90],\
[100, 200],\
[100, 200]
))

print(S.maxOverlapBF([0, 90, 95],\
[0, 90, 95],\
[100, 200, 110],\
[100, 200, 110]
))

print(S.maxOverlapBF([0, 90, 85],\
[0, 90, 85],\
[100, 200, 95],\
[100, 200, 95]
))

# FAILS BF vs Opt
print(S.maxOverlapBF([0, 90, 0],\
[0, 90, 0],\
[100, 200, 85],\
[100, 200, 85]
))

print(S.maxOverlapBF([0, 0, 0, 0, 0],\
[0, 0, 0, 0, 0],\
[1, 1, 1, 1, 1],\
[1, 1, 1, 1, 1]
))


# 10 expected
print(S.maxOverlap([-834807066, 29875148, -221775078, -916258586, -972137791, -987008576, -249836909, -510654168, -729353729, -811492744, -800191941, -956516940, -594890425, -26680512, -987891576, -721140877, -991847415, -137345612, -501409236, -850720808, -821709628, -999608139, -805796473, -474928971, -871318809, -703545039, -917912492, 409964733, -988082357, -619103151, -716474457, -70240840, -527606866, -892584194, -817552808, -903156695, 83492044, -528737553, -434643610, -74792277, -638395008, -794054902, 112631189, -724537763, -676308085, -565077864, -965788299, -745264175, -894861416, -728246289], [683529642, 506501603, -204628619, -487023590, 878316802, -867728262, 280078149, -348706874, -483677257, -740879015, -813840755, -117522364, 46352601, 581483027, -206767852, -561210468, -487732067, -924314858, -945455167, -968048216, 572153562, -499587122, -100955087, -745270414, -526590436, -559204674, -908282862, -459355549, 214948699, -738596173, -943828139, -131346452, -262739471, -967679438, 296976217, -16941024, -810190951, -853424258, 344323778, -738828638, -984977289, -964288306, -808137649, -180384539, -605507877, -522972732, -358458398, -103842913, -903692832, -713753310], [-822374328, 745485592, 229990506, -865930874, -102942892, -946319949, 912185339, 94930647, -550529395, -717477887, -784859591, -755353841, 69567539, 609396218, 259279476, 91721246, -987512152, 519093804, -433880109, -581183164, 632161645, -991365240, -730025398, -396759283, 454096393, -610448958, -844278381, 902112050, -810357168, 673533816, 474492307, 112587988, 488729538, -882438665, -778548396, -780851586, 820421407, 450928248, -61569503, 316354981, -188410300, -513801984, 974879187, 59662322, 635941373, -434644110, -211304730, -171426305, -705539694, -180171651], [743311221, 876334616, -93673197, -276617111, 900580081, -723716586, 987638799, -233844914, 479520739, -377528564, 964957796, 695234051, 291470296, 663543763, -97495696, 892005281, 565256118, -448732034, 229563717, -705447384, 743485586, 273433739, 302946828, 576613396, 393631157, 700928766, -517065346, 120823880, 802279432, -292598948, -480243835, 755730868, 438296583, -966528571, 700171892, 710931312, -526046882, -607401481, 437937171, 305887005, -935221171, -542660259, -805547731, -70499446, 235423063, -129616332, 887930524, 957605368, 247747978, -580000674]))

# 7 expected
print(S.maxOverlap([-85028107, -865991778, -449147890, -744904785, -886188950, -959856104, -248327979, -699571068, -4164834, -943281507, -856498256, -938317039, -985155942, -743318103, -974645630, -955544830, -808179072, 6551320, -937600160, -556965776, -517255738, -992145931, -563005856, 378561144, -869058752, -968328067, 589550276, 34880512, -812283590, 23891376, -848640258, -923068022, -924319034, -698413657, 389978978, -790560234, -889820876, -264255093, -891084846, 518292719, -563110686, -653664803, -965040252, -645924283, 38394224, -462713626, -389613607, -603830531, 8615393, -992272399], [36209007, -691315951, -192011978, -991576310, -828616435, -391690368, 186694136, -664646355, -921206181, -970358839, -770254685, -552959602, 526208346, -977358510, -945384696, -334768840, -617622856, -968593498, 72686112, -519456619, -283906081, -359356945, 330259469, -861278478, -828218308, -865286317, -8844488, -69989705, -968417437, -438865413, -906864194, -782503391, 135732106, -625203981, -664064729, -474604315, -800295710, -972767251, -195381850, 446673254, 738864987, -997889014, -158392418, -18100691, 103141023, -76505179, -684032653, -42587193, -974967477, -949689616], [342784118, 802842497, -409147628, 866200841, -390723838, -946436064, -16567707, -146291566, 847816631, -697827994, 926579191, -869265527, -921487403, -128848450, -706312906, 133643988, -802829495, 132209087, -818984583, 826723826, -287019527, -645487293, -528825676, 933233767, -207683761, -951873946, 749889769, 343681362, -738053849, 361833783, -95168243, -730132428, -612392055, -359310893, 764046788, -110681132, -829605100, -204063675, -212932346, 803345223, 304605814, 15971777, -758350866, 176742862, 660031909, -70357168, 630102120, 26703310, 716565821, -682827801], [792602188, -337685402, -99008564, -789940276, -443579238, 975694337, 656617751, -267355410, 60467652, -894103757, -129254958, 993862595, 527920580, -966876367, -252995059, -284007777, -50859145, -875217499, 813779129, -28783152, 80254155, -293937810, 710760856, -770819402, -709237271, -862095912, 874751965, 406474433, 183092778, -247359052, -868956457, -777136254, 478855304, 303465172, 400428344, -13063324, -467555317, 372781350, -160580574, 894759137, 864908505, -995595141, -141832111, 23934332, 269858974, 820005163, -649172635, 24361132, -951127937, -393814424]))

# 11 expected
print(S.maxOverlap([-328069945, 67735397, -892657562, -165093050, -559275388, -754006395, 325974984, -898364644, -710373715, -959457054, -823050212, -995343144, 150393485, -630354810, 430905060, -105617510, -624691677, 664751278, -609652457, -940422577, -958960106, -826326849, -963375152, -662564893, -873545164, -91341767, -535632001, -121910469, -781317967, 339852755, -497618250, -607536380, -998103775, -989417082, -892547865, -639154654, -820199079, -181568237, -889185128, -908386930, -358938084, -752694383, -857467590, 534775584, -863558142, 224891136, 101678051, 276831229, -470544526, -820128548], [-350274026, -996980611, -941674927, -255473028, -463063318, -998552961, -808644220, -777764638, -209432447, -984137971, -946018977, -592229837, -603942000, -952804175, -573517413, -482002812, -44426697, -962960212, -771257730, 14448147, -890718701, -512811576, -40885917, -873643171, -573285127, -929047098, -181865568, -382045777, -733028326, -898417630, -898617272, -606812936, -957158015, -938135465, -127684980, -136208193, -942458695, -739691970, -996143535, -831598725, 493013037, -138975813, -927869131, -709507680, -895480314, -851611327, -972166957, -192050434, -826266975, -599903045], [626787594, 265814464, -81968524, -89838564, -473799417, -629415441, 579574372, -784609853, -427529643, -955698432, -799102495, 723751864, 413113116, -255120871, 706605866, -2662229, -502395907, 755229439, 964655389, -594051330, -794183709, -262632890, -959853203, -394799340, -715714555, 25484417, -124000088, 667315225, -484713675, 476317446, -453151462, -521063907, -552453793, 50727891, -620636125, -141324780, -500696520, 926942829, 393969068, -709485105, 745173029, -308736087, -388870761, 784568162, -839793503, 941204212, 222129769, 428689682, -341523821, -445820498], [34203574, -323760611, 441336740, -232923285, 794971943, -832458641, -788780545, -634463890, 32643904, -717897733, -922174761, -466054021, -227095625, -935314788, -191191720, 875118674, 17911457, -696517456, 562664317, 940360753, -848481973, 918876240, 552601043, -224278454, 209097324, -872114369, 384070685, -300262213, -368726785, -648945978, 676417, -338588825, -928408845, 587681550, 289170657, 288848107, -941698662, -730701635, -689094993, 569525757, 871267177, 856446216, -229151943, -538168170, -503038274, 664970212, -924757549, 995335976, -648102877, 244745850]))