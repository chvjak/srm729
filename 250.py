class BrokenChessboard:
    def minimumFixes(self, board):
        N = len(board[0])
        BW = ['B', 'W']
        cor_cell = 0
        resB = 0
        for R, row in enumerate(board):
            for C, v in enumerate(row):
                if v != BW[cor_cell]:
                    resB += 1

                cor_cell = (cor_cell + 1) % 2
            if N % 2 == 0:
                cor_cell = (cor_cell + 1) % 2

        cor_cell = 1
        resW = 0
        for R, row in enumerate(board):
            for C, v in enumerate(row):
                if v != BW[cor_cell]:
                    resW += 1

                cor_cell = (cor_cell + 1) % 2
            if N % 2 == 0:
                cor_cell = (cor_cell + 1) % 2

        res = min(resB, resW)

        return res

S = BrokenChessboard()

print(S.minimumFixes(["WWWW","WWWW", "BBBB", "BBBB"]))

print(S.minimumFixes(["WWBWWBWBWWWWBWWWWWBWBBWWWBBBWBWBBWBBWWBWBBWWBBWBBB", "BWWBWWWWBBWBBWBWBBWBWWBBBBBBWWWWWWWBBWBBBBBWBWWBWW", "WBWWBBBWBWWWWWWBBWWBBBBBBBWBBBWBWBWBBBBWWWWWWBBWBW", "BWBBBWBBWBWWWWWBBWBBWBWWBWWWBWWWBBBWWBWWBWWWBWWBWW", "BWWWBBWWBWBBBWBWWWWWWWBBBBWBWWWWBWWBBWBBBBBBWWWWWB", "BBBWWBWBBWBWWWWWBWBBBWWWWWWWWBBBBBBBBWWBWBBBWWBWBB", "WBBBWBWWWBBWWBWBBWBWWWWWWBBWWBWBWWWBWBBWWBWBWWBBWB", "BBBWWBBWWWBBWWWBBBWBWBBBWBWWBWWBBBWBWWWBBBBWWBBBBW", "WBWBWBWWWBBWBBWWBBWWWBBBBBBWWWWWBBBWWWWWBWWWWBWBWW", "BBBWBBBBBBBBBBWWWBWWBWWBWWBWBWWBWWWWBWBBWBBBWBWWWB", "WWBWWBBBBBWWBWWBBBWBBBWWBWBWWBWWWWWBWWBBWBBWBBBBWW", "BWBWBWWWWWBBBWBBWBWBBBWWWWWWBBWWBWBBWBWBBWBWBBBWWB", "BBBBBWWWBBBBWBWBBWWBWWBWBBWWWBWBBWBWWBWBWWWWWBBBBW", "BBWWWWWWBWBWWWWWBWBBWBBBBWWWWBBBWWBBBWWWWWWWBWBBBB", "BBBWBBBWBBWBWBWWWBBBWBWWBWBBBBWBWWWWBBBBWBBWWBBWWB", "BWWWBWBWWWWBWWWBWWBWWWBBBBWBWWBBWWBWWWWBBWBBBWWWBW", "WWWWWBWWBBWBBWWWBWWWWWBWWBBWWBBBWBBWWWBWBWBBWBWWWW", "BBBBWWBWBWBWWBWWBWWWWWBWWBWWBBBWWBWWWWBBBWBWWBWBWW", "WWWBWWWWWWBWBWBWWWBWWWWBWWWWBBBBBBWWWWWBBBWBBWBBBW", "BWBWBBWBBWBBBBBWWBBBWBBWWBWWBWBBWBWBBBWBBBBWBWBWWB", "BBBBWBWBWBWWBWBBBBBBBBBBBWWBWWBBWWWBWWBWBBWWWBWWWB", "WBBWBBWBBBBWWWBWWBWBBWWWWBWWBWWWWBBWWBWWBWWBBWBWBB", "BWBBBWBBBWBBWBBBBBWBWWWBWBBWBWBWBBBBWBBWWWBBBBBBWW", "BBBBBWWBBWBWWBWWWBBBBWWWWBWWWWBBWWBWWBWBBWWWWWWWWW", "BWWBBWBBWBBBBWBWWBWWWWWWWBBBBWBWBBWWBBBWBWWWBBWBBW", "BBWWWWBBWWBBBBWBBBWWWBBWBBBBWBWWWBBBWBBBWBWBWWBWWW", "BBBWBWBWWWWWWBBBWBWWBWBWBBWWBBBBBWBBWBWWWWWBWWBBBB", "BBBWBBBBBWWBWBWBWWBWWBBWBWBWBBBBWBWWBWWWBBWBWWBBWB", "BWBBBBWBWWBBWBWBBBBWWWBBWBBBWBBWBWBBBWBWBBBWWWBWBB", "BBBBWWBBBWWWBBWBBBBBBWWBWWWBBWWWBBBWWBBWBWBBBBWWBW", "BBWWBBBWBBWWBWWWWWWWWBWWBBWWBBWWBWBWBBBBBWWWWBWWBB", "WWBBWBWWWWWWBWBBWBBBWBWWWWWWWBWWBBWBWBWBBBWBBWBWWB", "BBBBWBBBWWWWBBBWBBBBWWBBBBWBWWBWBBWBWBWBBBBBWBBBBB", "BBWBWWWBWBBWWWBWBWBWBBWWBBBBBWBWBBBBBWBBBBBBBBWWWW", "BWBBBBWWWWBWWBBWWBBBBBBWWBWBWWBWWWWBBWBBBWWWBWBBBB", "WBBWBWWBWWWWBWWWWBWWBWBBWWBWWWWWWBBWBBBWWBBBWWBBWB", "WWBBWBBBWBBBBWBWWWWWWWBWBBBWWBWBWWBBBBBBBWBWWWWWBW", "WWBBBWBWBWWWWWWWWWBWBWBWBBWWBWBWWWBBBBBBWWBWBWWBWW", "BBBBBBBWWBBWBWWBWWWWWBWWBWWWBWBBWWBBBBBBWBBWBBBBWB", "WWWWWWWWBWWBBBBWWWBWBWWWWBWWWWBBWBWBBWWWWWBWBWBBBW", "BBBBBBBBBWBWBBWWBBWWBWBWBWWWBBBWBBBWBWWWWWWBBWBWBW", "BWBWBWBBBWWBBWBBBWWWBWBBWWWBBBBWWBWBBWBWWWWBBWWBWW", "WWWBBWWBWBWBBWBWWWWBBBWBWWWWBBWWBBBWBBBBWBBWWWWWBB", "BWBWWWWWBBWWBBWBWWWWWBBWBWWBBBBBWWBWBWBBWBBWBWBBBW", "WWWBWWBWBBBBBBBBWBWWWBBBWBBWBBWBBWBWWWBBBWBBBWBWWB", "BWWBBWBWBBWWWBBWWBWWWBBBBWWBWBWBBWBBWBWWBWWWBWBBWW", "WWBBBWBBBBWWWWBWWWWBWWWWBWBWWWWWBWWWWWWBWWWWWBBWBW", "WBWWBWBBWBWWBWBBWWBWWWWBBBBBWWWWBBWWBBWWWBBBWBBBBW", "WBWWWBBBWBWBWBWWBBWWWBBWWWWWWBWWWBBBWWBWBBWBWWWWWW", "WWBWWBBBWBBWBWBBBBWBBWBBBWWWWBWWWWBBBBBWBWBWBBWBBW"]))

print(S.minimumFixes([""]))
print(S.minimumFixes(["BWB", "BBW", "BWW"]))
print(S.minimumFixes(["BWBBB", "WWBBW", "BBBBW", "WBWBB"]))






